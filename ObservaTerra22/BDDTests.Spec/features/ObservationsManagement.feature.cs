// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDDTests.Spec.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Observation management", SourceFile="features\\ObservationsManagement.feature", SourceLine=0)]
    public partial class ObservationManagementFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ObservationsManagement.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Observation management", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the mean of observations about a specific area, like Europe, for a give" +
            "n indicator", SourceLine=2)]
        public virtual void CalculateTheMeanOfObservationsAboutASpecificAreaLikeEuropeForAGivenIndicator()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the mean of observations about a specific area, like Europe, for a give" +
                    "n indicator", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Country",
                        "Value"});
            table1.AddRow(new string[] {
                        "Spain",
                        "1.5"});
            table1.AddRow(new string[] {
                        "France",
                        "1.5"});
            table1.AddRow(new string[] {
                        "Italy",
                        "3"});
            table1.AddRow(new string[] {
                        "China",
                        "1"});
#line 4
 testRunner.Given("a collection of observations about a specific indicator:", ((string)(null)), table1, "Given ");
#line 10
 testRunner.When("the system obtains the mean of such indicator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("the result must be equal to 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get the observations stored in the system about a given area or indicator", SourceLine=12)]
        public virtual void GetTheObservationsStoredInTheSystemAboutAGivenAreaOrIndicator()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the observations stored in the system about a given area or indicator", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("an empty collection of observations the system has stored about a given area or i" +
                    "ndicator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.When("a request asking for that information arrives at the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("the system will notify the user that it has no information, so the result is empt" +
                    "y", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("A new observation about a given aspect in Europe is added to the system", SourceLine=17)]
        public virtual void ANewObservationAboutAGivenAspectInEuropeIsAddedToTheSystem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new observation about a given aspect in Europe is added to the system", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Country",
                        "Number of observations"});
            table2.AddRow(new string[] {
                        "Spain",
                        "15"});
            table2.AddRow(new string[] {
                        "France",
                        "25"});
            table2.AddRow(new string[] {
                        "Italy",
                        "31"});
            table2.AddRow(new string[] {
                        "China",
                        "13"});
#line 19
 testRunner.Given("a list of indicators about a specific issue:", ((string)(null)), table2, "Given ");
#line 25
 testRunner.And("a new observation about that issue in China is added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.When("the system is asked for observations about that issue in China", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("the result sent back to the user will be formed by those 14 observations stored i" +
                    "n the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
