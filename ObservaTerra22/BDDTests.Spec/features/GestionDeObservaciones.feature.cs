// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34011
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDDTests.Spec.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Gestión de observaciones", SourceFile="features\\GestionDeObservaciones.feature", SourceLine=1)]
    public partial class GestionDeObservacionesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GestionDeObservaciones.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("es-ES"), "Gestión de observaciones", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calcular la media de observaciones de un área determinada, como Europa, para un i" +
            "ndicador determinado", SourceLine=3)]
        public virtual void CalcularLaMediaDeObservacionesDeUnAreaDeterminadaComoEuropaParaUnIndicadorDeterminado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calcular la media de observaciones de un área determinada, como Europa, para un i" +
                    "ndicador determinado", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "País",
                        "Valor"});
            table1.AddRow(new string[] {
                        "España",
                        "1,5"});
            table1.AddRow(new string[] {
                        "Francia",
                        "1,5"});
            table1.AddRow(new string[] {
                        "Italia",
                        "3"});
            table1.AddRow(new string[] {
                        "Chile",
                        "1"});
#line 5
 testRunner.Given("una lista de observaciones sobre un indicador dado:", ((string)(null)), table1, "Dado ");
#line 11
 testRunner.When("se calcula la nota media de dicho indicador", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Cuando ");
#line 12
 testRunner.Then("el resultado debe ser el valor 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entonces ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Obtener las observaciones almacenadas en el sistema sobre un área o indicador det" +
            "erminado", SourceLine=13)]
        public virtual void ObtenerLasObservacionesAlmacenadasEnElSistemaSobreUnAreaOIndicadorDeterminado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Obtener las observaciones almacenadas en el sistema sobre un área o indicador det" +
                    "erminado", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("una lista vacía de observaciones que el sistema posee sobre un área o indicador d" +
                    "eterminado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 16
 testRunner.When("se realiza una petición de dicha lista", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Cuando ");
#line 17
 testRunner.Then("el sistema informará al usuario que no se poseen datos sobre las observaciones pe" +
                    "didas", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entonces ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Se añade una nueva observación sobre un aspecto determinado en Europa", SourceLine=18)]
        public virtual void SeAnadeUnaNuevaObservacionSobreUnAspectoDeterminadoEnEuropa()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Se añade una nueva observación sobre un aspecto determinado en Europa", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "País",
                        "Número de observaciones"});
            table2.AddRow(new string[] {
                        "España",
                        "15"});
            table2.AddRow(new string[] {
                        "Francia",
                        "25"});
            table2.AddRow(new string[] {
                        "Italia",
                        "31"});
            table2.AddRow(new string[] {
                        "Chile",
                        "13"});
#line 20
 testRunner.Given("una lista de indicadores sobre un aspecto determinado:", ((string)(null)), table2, "Dado ");
#line 26
 testRunner.And("se añade una nueva observación sobre ese aspecto en Chile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Y ");
#line 27
 testRunner.When("se reciba una petición sobre dicho aspecto en Chile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Cuando ");
#line 28
 testRunner.Then("se devolverá un resultado formado por las 14 observaciones que contienen dicho as" +
                    "pecto en Chile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entonces ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
